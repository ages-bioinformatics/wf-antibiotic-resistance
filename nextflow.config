plugins {
  id 'nf-sqldb@0.2.0'
}

params {
	// workflow related settings
	threads = 4

	// database_paths
	db_dir = "${projectDir}/db"
	amrfinder_db = "${params.db_dir}/amrfinder_db"
	bakta_db = "${params.db_dir}/bakta/db-light"
	mob_typer_db = "${params.db_dir}/mobsuite"
	pointfinder_db = "${params.db_dir}/pointfinder_db"
	resfinder_db = "${params.db_dir}/resfinder_db"
	speciesfinder_db = "${params.db_dir}/speciesfinder_db"
	plasmidfinder_db = "${params.db_dir}/plasmidfinder_db"

	// settings for amrdb (mysql/mariadb or sqlite supported)
	use_sqlite = false
	amrdb_name = ''
	amrdb_host = ''
	sqlite_db_path = "${params.db_dir}/agesamrdb.db"

	// DB input-settings
	db_name = ''
	db_host = ''
	db_input_query = ''

}

manifest {
	name = 'wf-antibiotic-resistance'
	author = 'Patrick Hyden, Tobias MÃ¶senbacher, AGES GmbH'
	homePage = 'https://github.com/ages-bioinformatics/wf-antibiotic-resistance'
	description = 'antibiotics resistance gene detection and result collection'
	mainScript = 'main.nf'
	nextflowVersion = '>=22.04'
	version = '1.1'	
}
	

process {
	errorStrategy = "ignore"
	withLabel: rgi { conda="${projectDir}/conda_envs/env_rgi.yml" }
	withLabel: resfinder { conda="${projectDir}/conda_envs/env_resfinder.yml" }
	withLabel: amrfinder { conda="${projectDir}/conda_envs/env_amrfinder.yml" }
	withLabel: abr_combine { conda="${projectDir}/conda_envs/env_python.yml" }
	withLabel: isescan { conda="bioconda::isescan" }
	withLabel: amrdb { conda="${projectDir}/conda_envs/env_python.yml" }
	withLabel: bakta { conda="${projectDir}/conda_envs/env_bakta.yml" }
	withLabel: mobsuite { conda="${projectDir}/conda_envs/env_mobsuite.yml" }
	withLabel: speciesfinder { conda="${projectDir}/conda_envs/env_speciesfinder.yml" }
	withLabel: plasmidfinder { conda="${projectDir}/conda_envs/env_plasmidfinder.yml" }
	withLabel: phispy { conda="${projectDir}/conda_envs/env_phispy.yml" }
	withLabel: mlst { conda="${projectDir}/conda_envs/env_mlst.yml" }
}

conda {
	useMamba = true
}


// optional: sql connection of nextflow directly to generate processes from
// entries in database - if ngsresults are organized accordingly
sql {
    db {
	seqfiles_mariadb {
	      url = 'jdbc:mariadb://'+params.db_host+':3306/'+params.db_name
	      user = secrets.mysql_user
	      password = secrets.mysql_pw
	}
    }
}

report {
	enabled = true
	overwrite = true
	file = "${projectDir}/report.html"
}
